# Statements
Main    <Statements> ::== <Statement> <Statements>
Epsilon <Statements> ::== $

# Compound Statement
Main <CompoundStatement> ::== { <Statements> }
Compound <Statement> ::== <CompoundStatement>

# Variable Declaration Statement
VariableDeclaration <Statement> ::== VAR [ID] <VariableDeclaratorList> ;
Main <VariableDeclaratorList> ::== <VariableDeclarator> <VariableDeclaratorListSuffix>
Main    <VariableDeclaratorListSuffix> ::== , <VariableDeclarator> <VariableDeclaratorListSuffix>
Epsilon <VariableDeclaratorListSuffix> ::== $
Main <VariableDeclarator> ::== [ID] <VariableArraySizeDeclarator> <InitializerDeclarator>
Main    <VariableArraySizeDeclarator> ::== [ <ArrayDimension> ] <VariableArraySizeDeclarator>
Epsilon <VariableArraySizeDeclarator> ::== $
Main    <InitializerDeclarator> ::== EQ <Expression>
Epsilon <InitializerDeclarator> ::== $
Main    <ArrayDimension> ::== [NUMBER_LITERAL]
Epsilon <ArrayDimension> ::== $

# If-Else Statement
If <Statement> ::== [IF] ( <Expression> ) <Statement> <ElseStatement>
Epsilon <ElseStatement> ::== $
Main    <ElseStatement> ::== ELSE <Statement>

# Loop statement
For      <Statement> ::== FOR ( <ExpressionOpt> ; <ExpressionOpt> ; <ExpressionOpt> ) <Statement>
While    <Statement> ::== WHILE ( <Expression> ) <Statement>
Break    <Statement> ::== [BREAK] ;
Continue <Statement> ::== [CONTINUE] ;

# Expression statement
Expression <Statement> ::== <Expression> ;

# Printk statement
Printk   <Statement> ::== PRINTK <Expression> ;

# Write svm opcode statement
WriteOpcode <Statement> ::== __SVM__ [ID] <OpcodeParam> ;
Main    <OpcodeParam> ::== [NUMBER_LITERAL]
GetAddr <OpcodeParam> ::== AND [ID]
Epsilon <OpcodeParam> ::== $

# Return statement
Return <Statement> ::== [RET] <ReturnValue> ;
Main    <ReturnValue> ::== <Expression>
Epsilon <ReturnValue> ::== $
